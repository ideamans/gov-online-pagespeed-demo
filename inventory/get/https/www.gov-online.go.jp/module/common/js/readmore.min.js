/*!
 * @preserve
 *
 * Readmore.js jQuery plugin
 * Author: @jed_foster
 * Project home: http://jedfoster.github.io/Readmore.js
 * Licensed under the MIT license
 *
 * Debounce function from http://davidwalsh.name/javascript-debounce-function
 */
!(function (factory) {
  "function" == typeof define && define.amd
    ? define(["jquery"], factory)
    : "object" == typeof exports
    ? (module.exports = factory(require("jquery")))
    : factory(jQuery);
})(function ($) {
  "use strict";
  var readmore = "readmore",
    defaults = {
      speed: 100,
      collapsedHeight: 200,
      heightMargin: 16,
      moreLink: '<a href="#"> </a>',
      lessLink: '<a href="#"> </a>',
      embedCSS: !0,
      blockCSS: "display: block; width: 100%;",
      startOpen: !1,
      blockProcessed: function () {},
      beforeToggle: function () {},
      afterToggle: function () {},
    },
    cssEmbedded = {},
    uniqueIdCounter = 0;
  function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      var context = this,
        args = arguments,
        later = function () {
          (timeout = null), immediate || func.apply(context, args);
        },
        callNow = immediate && !timeout;
      clearTimeout(timeout), (timeout = setTimeout(later, wait)), callNow && func.apply(context, args);
    };
  }
  function uniqueId(prefix) {
    var id = ++uniqueIdCounter;
    return String(null === prefix ? "rmjs-" : prefix) + id;
  }
  function setBoxHeights(element) {
    var el = element
        .clone()
        .css({ height: "auto", width: element.width(), maxHeight: "none", overflow: "hidden" })
        .insertAfter(element),
      expandedHeight = el.outerHeight(),
      cssMaxHeight = parseInt(
        el
          .css({ maxHeight: "" })
          .css("max-height")
          .replace(/[^-\d\.]/g, ""),
        10
      ),
      defaultHeight = element.data("defaultHeight");
    el.remove();
    var collapsedHeight = cssMaxHeight || element.data("collapsedHeight") || defaultHeight;
    element
      .data({ expandedHeight: expandedHeight, maxHeight: cssMaxHeight, collapsedHeight: collapsedHeight })
      .css({ maxHeight: "none" });
  }
  var resizeBoxes = debounce(function () {
    $("[data-readmore]").each(function () {
      var current = $(this),
        isExpanded = "true" === current.attr("aria-expanded");
      setBoxHeights(current), current.css({ height: current.data(isExpanded ? "expandedHeight" : "collapsedHeight") });
    });
  }, 100);
  function embedCSS(options) {
    if (!cssEmbedded[options.selector]) {
      var styles = " ";
      options.embedCSS &&
        "" !== options.blockCSS &&
        (styles +=
          options.selector +
          " + [data-readmore-toggle], " +
          options.selector +
          "[data-readmore]{" +
          options.blockCSS +
          "}"),
        (styles += options.selector + "[data-readmore]{transition: height " + options.speed + "ms;overflow: hidden;}"),
        (d = document),
        (u = styles),
        ((css = d.createElement("style")).type = "text/css"),
        css.styleSheet ? (css.styleSheet.cssText = u) : css.appendChild(d.createTextNode(u)),
        d.getElementsByTagName("head")[0].appendChild(css),
        (cssEmbedded[options.selector] = !0);
    }
    var d, u, css;
  }
  function Readmore(element, options) {
    (this.element = element),
      (this.options = $.extend({}, defaults, options)),
      embedCSS(this.options),
      (this._defaults = defaults),
      (this._name = readmore),
      this.init(),
      window.addEventListener
        ? (window.addEventListener("load", resizeBoxes), window.addEventListener("resize", resizeBoxes))
        : (window.attachEvent("load", resizeBoxes), window.attachEvent("resize", resizeBoxes));
  }
  (Readmore.prototype = {
    init: function () {
      var current = $(this.element);
      current.data({ defaultHeight: this.options.collapsedHeight, heightMargin: this.options.heightMargin }),
        setBoxHeights(current);
      var collapsedHeight = current.data("collapsedHeight"),
        heightMargin = current.data("heightMargin");
      if (current.outerHeight(!0) <= collapsedHeight + heightMargin)
        return (
          this.options.blockProcessed &&
            "function" == typeof this.options.blockProcessed &&
            this.options.blockProcessed(current, !1),
          !0
        );
      var id = current.attr("id") || uniqueId(),
        useLink = this.options.startOpen ? this.options.lessLink : this.options.moreLink,
        _this;
      current.attr({ "data-readmore": "", "aria-expanded": this.options.startOpen, id: id }),
        current.after(
          $(useLink)
            .on(
              "click",
              ((_this = this),
              function (event) {
                _this.toggle(this, current[0], event);
              })
            )
            .attr({ "data-readmore-toggle": id, "aria-controls": id })
        ),
        this.options.startOpen || current.css({ height: collapsedHeight }),
        this.options.blockProcessed &&
          "function" == typeof this.options.blockProcessed &&
          this.options.blockProcessed(current, !0);
    },
    toggle: function (trigger, element, event) {
      event && event.preventDefault(),
        trigger || (trigger = $('[aria-controls="' + this.element.id + '"]')[0]),
        element || (element = this.element);
      var $element = $(element),
        newHeight = "",
        newLink = "",
        expanded = !1,
        collapsedHeight = $element.data("collapsedHeight"),
        _this;
      $element.height() <= collapsedHeight
        ? ((newHeight = $element.data("expandedHeight") + "px"), (newLink = "lessLink"), (expanded = !0))
        : ((newHeight = collapsedHeight), (newLink = "moreLink")),
        this.options.beforeToggle &&
          "function" == typeof this.options.beforeToggle &&
          this.options.beforeToggle(trigger, $element, !expanded),
        $element.css({ height: newHeight }),
        $element.on(
          "transitionend",
          ((_this = this),
          function () {
            _this.options.afterToggle &&
              "function" == typeof _this.options.afterToggle &&
              _this.options.afterToggle(trigger, $element, expanded),
              $(this).attr({ "aria-expanded": expanded }).off("transitionend");
          })
        ),
        $(trigger).replaceWith(
          $(this.options[newLink])
            .on(
              "click",
              (function (_this) {
                return function (event) {
                  _this.toggle(this, element, event);
                };
              })(this)
            )
            .attr({ "data-readmore-toggle": $element.attr("id"), "aria-controls": $element.attr("id") })
        );
    },
    destroy: function () {
      $(this.element).each(function () {
        var current = $(this);
        current
          .attr({ "data-readmore": null, "aria-expanded": null })
          .css({ maxHeight: "", height: "" })
          .next("[data-readmore-toggle]")
          .remove(),
          current.removeData();
      });
    },
  }),
    ($.fn.readmore = function (options) {
      var args = arguments,
        selector = this.selector;
      return "object" == typeof (options = options || {})
        ? this.each(function () {
            if ($.data(this, "plugin_readmore")) {
              var instance = $.data(this, "plugin_readmore");
              instance.destroy.apply(instance);
            }
            (options.selector = selector), $.data(this, "plugin_readmore", new Readmore(this, options));
          })
        : "string" == typeof options && "_" !== options[0] && "init" !== options
        ? this.each(function () {
            var instance = $.data(this, "plugin_readmore");
            instance instanceof Readmore &&
              "function" == typeof instance[options] &&
              instance[options].apply(instance, Array.prototype.slice.call(args, 1));
          })
        : void 0;
    });
});
